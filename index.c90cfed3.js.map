{"mappings":"AAAO,MAAMA,EAAO,CAClBC,SAAUC,SAASC,cAAc,cACjCC,KAAMF,SAASC,cAAc,eCDxB,IAkBIE,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC9BE,SAASG,EAAWC,GACzB,MAAMC,EAAO,CACXN,GAAIN,KAMN,OAHA,IAAIa,SAASF,EAAMG,eAAeC,SAAQ,CAACC,EAAOC,KAChDL,EAAKK,GAAQD,CAAK,IAEbJ,C,CCJT,SAASM,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QAPP,WAOsC,E,KAGhEC,EAAe,C,SATf,SAAkBX,GAChB,IAAIY,EAAYN,IAChBM,EAAUC,KAAKb,GACfS,aAAaK,QAJW,QAIgBP,KAAKQ,UAAUH,G,WAM9BN,GCRpB,SAASU,EAAWhB,GACzB,MAAMiB,EAAS,sFACuCjB,EAAKN,uCAC7CM,EAAKkB,oBAAoBlB,EAAKmB,8BAE5CpC,EAAKC,SAASoC,mBAAmB,YAAaH,E,CCehDlC,EAAKI,KAAKkC,iBAAiB,UAE3B,SAAsBtB,GACpBA,EAAMuB,iBAEN,MAAMtB,EAAOF,EAAWC,GACxBiB,EAAWhB,GAEXW,EAAgBY,SAASvB,E,IC3BpB,WACL,MACMwB,EADQb,EAAgBc,WAE3BC,KAAIC,GACI,sFAC2CA,EAAEjC,uCAC1CiC,EAAET,oBAAoBS,EAAER,gCAGnCS,KAAK,IACR7C,EAAKC,SAASoC,mBAAmB,YAAaI,E,CDoBhD","sources":["src/js/refs.js","node_modules/nanoid/index.browser.js","src/js/create-card.js","src/js/localStorageApi.js","src/js/renderCard.js","src/index.js","src/js/render-cards.js"],"sourcesContent":["export const refs = {\n  taskList: document.querySelector('#task-list'),\n  form: document.querySelector('#task-form'),\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nexport function createCard(event) {\n  const data = {\n    id: nanoid(),\n  };\n\n  new FormData(event.currentTarget).forEach((value, name) => {\n    data[name] = value;\n  });\n  return data;\n}\n","const LOCAL_STORAGE_KEY = 'tasks';\nfunction saveCard(data) {\n  let dataArray = getCards();\n  dataArray.push(data);\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(dataArray));\n}\nfunction getCards() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];\n}\n\nexport default { saveCard, getCards };\n","import { refs } from './refs';\n\nexport function renderCard(data) {\n  const markup = `<li class=\"task-list-item\">\n          <button class=\"task-list-item-btn\" data-id=\"${data.id}\">Удалить</button>\n          <h3>${data.taskName}</h3> <p>${data.taskText}</p>\n        </li>`;\n  refs.taskList.insertAdjacentHTML('beforeend', markup);\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\nimport { refs } from './js/refs';\nimport { createCard } from './js/create-card';\nimport localStorageApi from './js/localStorageApi';\nimport { renderCards } from './js/render-cards';\nimport { renderCard } from './js/renderCard';\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const data = createCard(event);\n  renderCard(data);\n\n  localStorageApi.saveCard(data);\n}\n\nrenderCards();\n","import localStorageApi from './localStorageApi';\nimport { refs } from './refs';\n\nexport function renderCards() {\n  const cards = localStorageApi.getCards();\n  const markKap = cards\n    .map(e => {\n      return `<li class=\"task-list-item\">\n          <button class=\"task-list-item-btn\" data-id=\"${e.id}\">Удалить</button>\n          <h3>${e.taskName}</h3> <p>${e.taskText}</p>\n        </li>`;\n    })\n    .join('');\n  refs.taskList.insertAdjacentHTML('beforeend', markKap);\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","taskList","document","querySelector","form","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$d6f6acfe8cdb9b3c$export$b7316deff43c35f7","event","data","FormData","currentTarget","forEach","value","name","$32f32acdb3536e0f$var$getCards","JSON","parse","localStorage","getItem","$32f32acdb3536e0f$export$2e2bcd8739ae039","dataArray","push","setItem","stringify","$b62d4e3fbd34d2e3$export$e9aece8f6847aae6","markup","taskName","taskText","insertAdjacentHTML","addEventListener","preventDefault","saveCard","markKap","getCards","map","e","join"],"version":3,"file":"index.c90cfed3.js.map"}